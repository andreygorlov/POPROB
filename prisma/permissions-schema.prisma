// ===== ADVANCED PERMISSIONS SYSTEM =====

// Module definitions for granular permissions
model Module {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "contacts", "production", "sales"
  label       String   // Display name in Hebrew
  description String?
  icon        String?  // Icon name for UI
  order       Int      @default(0) // Display order
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Multi-tenant support
  clientId    String   @default("default")
  tenantId    String?  // Future multi-tenant support
  
  // Relations
  permissions Permission[]
  
  @@index([clientId, isActive])
}

// Permission definitions
model Permission {
  id          String   @id @default(cuid())
  name        String   // e.g., "contacts.create", "production.view"
  label       String   // Display name in Hebrew
  description String?
  moduleId    String   // Reference to Module
  action      String   // CREATE, READ, UPDATE, DELETE, EXPORT, IMPORT, etc.
  resource    String   // contacts, orders, invoices, etc.
  isSystem    Boolean  @default(false) // System permissions cannot be deleted
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Multi-tenant support
  clientId    String   @default("default")
  tenantId    String?  // Future multi-tenant support
  
  // Relations
  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  rolePermissions RolePermission[]
  userPermissions  UserPermission[]
  
  @@unique([name, clientId])
  @@index([moduleId])
  @@index([action, resource])
}

// Enhanced Role model with hierarchy
model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  label       String   // Display name in Hebrew
  description String?
  level       Int      @default(0) // Role hierarchy level (0=lowest, 100=highest)
  isSystem    Boolean  @default(false) // System roles cannot be deleted
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Multi-tenant support
  clientId    String   @default("default")
  tenantId    String?  // Future multi-tenant support
  
  // Relations
  users       UserRole[]
  permissions RolePermission[]
  
  @@index([clientId, isActive])
  @@index([level])
}

// Role-Permission mapping
model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  granted      Boolean    @default(true) // true = granted, false = explicitly denied
  createdAt    DateTime   @default(now())
  
  // Multi-tenant support
  clientId     String     @default("default")
  tenantId     String?    // Future multi-tenant support
  
  // Relations
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@unique([roleId, permissionId, clientId])
  @@index([roleId])
  @@index([permissionId])
}

// User-Permission direct mapping (overrides role permissions)
model UserPermission {
  id           String     @id @default(cuid())
  userId       String
  permissionId String
  granted      Boolean    @default(true) // true = granted, false = explicitly denied
  expiresAt    DateTime?  // Optional expiration date
  createdAt    DateTime   @default(now())
  
  // Multi-tenant support
  clientId     String     @default("default")
  tenantId     String?    // Future multi-tenant support
  
  // Relations
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@unique([userId, permissionId, clientId])
  @@index([userId])
  @@index([permissionId])
}

// Permission audit log
model PermissionAudit {
  id           String     @id @default(cuid())
  userId       String
  permissionId String
  action       String     // GRANTED, DENIED, REVOKED
  resource     String?    // Specific resource affected
  resourceId   String?    // ID of specific resource
  reason       String?    // Reason for permission change
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime   @default(now())
  
  // Multi-tenant support
  clientId     String     @default("default")
  tenantId     String?    // Future multi-tenant support
  
  // Relations
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@index([userId, createdAt])
  @@index([permissionId, createdAt])
  @@index([action, createdAt])
}
