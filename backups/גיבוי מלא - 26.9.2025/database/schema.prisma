// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== AUTHENTICATION & AUTHORIZATION =====

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Multi-tenant support
  clientId      String?   @default("default")
  
  // User roles and permissions
  roles         UserRole[]
  permissions   UserPermission[]
  
  // Relations to business modules
  contacts      Contact[]
  employees     Employee[]
  tasks         Task[]
  projects      Project[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ===== RBAC SYSTEM =====

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Multi-tenant support
  clientId    String   @default("default")
  
  // Relations
  users       UserRole[]
  permissions RolePermission[]
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  module      String   // e.g., 'contacts', 'hr', 'production'
  action      String   // e.g., 'create', 'read', 'update', 'delete'
  createdAt   DateTime @default(now())
  
  // Multi-tenant support
  clientId    String   @default("default")
  
  // Relations
  roles       RolePermission[]
  users       UserPermission[]
}

model UserRole {
  id     String @id @default(cuid())
  userId String
  roleId String
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  @@unique([userId, roleId])
}

model RolePermission {
  id           String @id @default(cuid())
  roleId       String
  permissionId String
  
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@unique([roleId, permissionId])
}

model UserPermission {
  id           String @id @default(cuid())
  userId       String
  permissionId String
  
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@unique([userId, permissionId])
}

// ===== CONTACTS MODULE =====

model Contact {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String?
  phone     String?
  company   String?
  position  String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Multi-tenant support
  clientId  String   @default("default")
  
  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Business relations
  projects  ProjectContact[]
}

// ===== HR MODULE =====

model Employee {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String   @unique
  phone       String?
  position    String
  department  String?
  salary      Float?
  hireDate    DateTime
  status      String   @default("ACTIVE") // ACTIVE, INACTIVE, TERMINATED, ON_LEAVE
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Multi-tenant support
  clientId    String   @default("default")
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Business relations
  tasks       Task[]
  projects    ProjectEmployee[]
}

// ===== PRODUCTION MODULE =====

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      String        @default("PLANNING") // PLANNING, IN_PROGRESS, ON_HOLD, COMPLETED, CANCELLED
  startDate   DateTime?
  endDate     DateTime?
  budget      Float?
  progress    Int           @default(0) // 0-100
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Multi-tenant support
  clientId    String        @default("default")
  
  // Relations
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Business relations
  tasks       Task[]
  contacts    ProjectContact[]
  employees   ProjectEmployee[]
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      String     @default("TODO") // TODO, IN_PROGRESS, IN_REVIEW, DONE, CANCELLED
  priority    String     @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Multi-tenant support
  clientId    String     @default("default")
  
  // Relations
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  projectId   String
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  assigneeId  String?
  assignee    Employee?  @relation(fields: [assigneeId], references: [id], onDelete: SetNull)
}

// ===== JUNCTION TABLES =====

model ProjectContact {
  id        String @id @default(cuid())
  projectId String
  contactId String
  
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  contact Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, contactId])
}

model ProjectEmployee {
  id         String @id @default(cuid())
  projectId  String
  employeeId String
  
  project  Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, employeeId])
}

// ===== AUDIT & LOGGING =====

model AuditLog {
  id        String   @id @default(cuid())
  action    String   // CREATE, UPDATE, DELETE, LOGIN, etc.
  entity    String   // Table name
  entityId  String   // Record ID
  oldValues String?  // Previous values (JSON string)
  newValues String?  // New values (JSON string)
  userId    String   // Who performed the action
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  
  // Multi-tenant support
  clientId  String   @default("default")
}

// ===== SYSTEM CONFIGURATION =====

model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      String   @default("string") // string, number, boolean, json
  module    String?  // Which module this config belongs to
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Multi-tenant support
  clientId  String   @default("default")
}

// ===== CUSTOM FIELDS SYSTEM =====

enum EntityType {
  CONTACT
  COMPANY
  SUPPLIER
  EMPLOYEE
  PROJECT
  TASK
}

enum CustomFieldType {
  TEXT
  NUMBER
  DATE
  SELECT
  BOOLEAN
  EMAIL
  PHONE
  URL
  TEXTAREA
}

model CustomField {
  id          String           @id @default(cuid())
  name        String           // Internal field name (e.g., "customer_priority")
  label       String           // Display label (e.g., "Customer Priority")
  type        CustomFieldType  // Field type
  entityType  EntityType       // Which entity this field belongs to
  options     Json?            // For SELECT fields: array of options
  required    Boolean          @default(false)
  order       Int              @default(0) // Display order
  isActive    Boolean          @default(true)
  description String?          // Help text for users
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  // Multi-tenant support
  clientId    String           @default("default")
  
  // Relations
  values      CustomFieldValue[]
  
  @@unique([name, entityType, clientId])
  @@index([entityType, clientId])
}

model CustomFieldValue {
  id            String       @id @default(cuid())
  entityId      String       // ID of the entity (Contact, Company, etc.)
  entityType    EntityType   // Type of entity
  customFieldId String       // Reference to CustomField
  value         Json         // The actual field value (stored as JSON)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  // Multi-tenant support
  clientId      String       @default("default")
  
  // Relations
  customField   CustomField  @relation(fields: [customFieldId], references: [id], onDelete: Cascade)
  
  @@unique([entityId, entityType, customFieldId, clientId])
  @@index([entityId, entityType])
  @@index([customFieldId])
}
